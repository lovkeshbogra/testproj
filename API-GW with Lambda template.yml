AWSTemplateFormatVersion: 2010-09-09
Description: '1-boi-aws-vip - API-GW with lambda'
Resources:

    LambdaRole:
        Type: 'AWS::IAM::Role'
        Properties:
          RoleName: aws-vip-gw-api-lambda
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: 'sts:AssumeRole'
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          Tags:
          - Key: Name
            Value: boi-aws-vip-api-lambda
          - Key: Description
            Value: Service role used by Lambda
        
    StubFunction:
        Type: 'AWS::Lambda::Function'
        DependsOn: LambdaRole
        Properties:
            Role: !GetAtt LambdaRole.Arn
            FunctionName: boi-aws-vip-api-lambda
            Timeout: 120
            Handler:1` index.handler
            Runtime: python3.7
            MemorySize: 128
            Tags:
            - Key: Name
              Value: aws-vip-api-lambda
            - Key: Description
              Value: Called by APIGW for request-response API process
            Code:
                ZipFile: |
                    import json
                    def handler(event, context):
                        '''
                            Extracting variables from event payload
                        '''
                        try:
                            data = json.loads(event['body']) # extract from api request body
                    
                            return build_api_response(200, data)
                            
                        except Exception as e:
                            print(e)
                            resp = {'message' : str(e)}
                            return build_api_response(500, resp)
                    
                    def build_api_response(status_code, data=False):
                    
                        response = {}
                    
                        if data == False:
                            data = {}
                    
                        response['statusCode'] = status_code      
                        response['headers'] = {"Content-Type": "application/json", "Access-Control-Allow-Origin": "*" }
                        response["body"] = json.dumps(data, indent=2)
                    
                        return response
                            
                                        
    ApiRole:
        Type: 'AWS::IAM::Role'
        Properties:
          RoleName: boi-aws-vip-gw-api
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service: apigateway.amazonaws.com
                Action: 'sts:AssumeRole'
          Policies:
            - PolicyName: custom
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action: 'lambda:InvokeFunction'
                    Resource: !GetAtt StubFunction.Arn
          Tags:
          - Key: Name
            Value: aws-vip-api
          - Key: Description
            Value: Service role used by API-GW
    
    Api:
        Type: AWS::ApiGateway::RestApi
        Properties: 
            Body: 
                openapi: "3.0.1"
                info:
                  title: "aws-vip-api"
                  version: "0.1.0"
                servers:
                - url: "https://api.com/"
                paths:
                  /stub:
                    post:
                      parameters:
                      - name: "Authorization"
                        in: "header"
                        required: false
                        schema:
                          type: "string"
                      # security:
                      # - api-request-authorizer: []
                      responses:
                        '200':
                          description: "200 response"
                          headers:
                            Access-Control-Allow-Origin:
                              schema:
                                type: "string"
                            Access-Control-Allow-Methods:
                              schema:
                                type: "string"
                            Access-Control-Allow-Headers:
                              schema:
                                type: "string"
                          content:
                            application/json:
                              schema:
                                $ref: "#/components/schemas/Empty"
                        '403':
                          description: "403 response"
                          headers:
                            Access-Control-Allow-Origin:
                              schema:
                                type: "string"
                            Access-Control-Allow-Methods:
                              schema:
                                type: "string"
                            Access-Control-Allow-Headers:
                              schema:
                                type: "string"
                          content:
                            application/json:
                              schema:
                                $ref: "#/components/schemas/Empty"
                      x-amazon-apigateway-request-validator: "all"
                      x-amazon-apigateway-integration:
                        httpMethod: "POST"
                        type: "aws_proxy"
                        credentials: !GetAtt ApiRole.Arn
                        uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StubFunction.Arn}/invocations"
                        responses:
                          default:
                            statusCode: "403"
                            responseParameters:
                              method.response.header.Access-Control-Allow-Methods: "'POST,HEAD,OPTIONS'"
                              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                              method.response.header.Access-Control-Allow-Origin: "'*'"
                        passthroughBehavior: "when_no_templates"
                    
                components:
                  schemas:
                    Empty:
                      title: "Empty Schema"
                      type: "object"
                  securitySchemes: {}
                x-amazon-apigateway-request-validators:
                  all:
                    validateRequestParameters: true
                    validateRequestBody: true
                  params-only:
                      validateRequestBody: false
                      validateRequestParameters: true
                                
            Description: aws-vip-api - sample
            Name: aws-vip-api
            # Tags: 
            #     - Tag
    
    ApiDeployment:
        Type: AWS::ApiGateway::Deployment
        Properties: 
            Description: aws-vip-deployment
            RestApiId: !Ref Api
            StageName: api
            
Outputs:
    InvokeUrl:
      Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/api/stub/"

